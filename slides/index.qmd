---
title: Introduction to Quarto
author: Matt Bhagat-Conway
institute: Odum Institute<br/>University of North Carolina at Chapel Hill
format:
    revealjs:
        width: 1600
        height: 900
        theme: [default, unc.scss]
        logo: UNC_logo_RGB.png
        slide-number: true
        code-line-numbers: false
execute:
    eval: false
    include: true
footer: https://projects.indicatrix.org/odum-quarto
---

## About me

- Assistant professor of City and Regional Planning
- Research focus: transportation modeling and simulation
- PhD/MA in Geography from Arizona State, BA from UC Santa Barbara
- Three years experience as transportation modeling software developer

## What is Quarto?

- Dynamic document preparation system
- _Document_ can mean a lot of things: articles, presentations, books, websites, dashboards, etc.
    - These slides are a Quarto document
- _Dynamic_ means the document can incorporate code that is executed when the document is _rendered_, so outputs always stay up to date

## The Quarto philosophy

- Analysis and writing should be intertwined and mutually referential
- Content and analysis should be separate from formatting and presentation
- Analysis results and output should be separate from analysis procedures and writing

## Similarities to Jupyter Notebooks

- Quarto and Jupyter both allow mixing code, text, and output
- Both use Markdown for formatting text
- Jupyter Notebooks are in a custom format that mixes code, text, and output all in the same file
- Jupyter Notebooks can only be created with notebook-specific software
- Quarto documents are a human-readable format
- Outputs are only included when the document is _rendered_ to an output format
- Quarto documents can be authored with any text editor, and most people write them by hand

## Similarities to R Markdown

- Quarto is more similar to R Markdown
- Both allow embedding code in Markdown documents
- Quarto allows more languages: Python, Julia, and Observable in addition to R
    - And any other language supported by Jupyter, with some configuration

## Basic structure of a Quarto document

- Front matter
- Markdown text
- Code cells

## Quarto workflow

- Author a Quarto document using a text editor (RStudio, VSCode, etc.)
- Run cells interactively as you develop your results
- Render the document to an output format (e.g. HTML, PDF, Word)
    - Execute all code
    - Convert text to formatted text
    - Insert images
    - Resolve citations and cross-references
    - Apply formatting from template

## Front matter

- The _front matter_ of a Quarto document is a section enclosed with `---`
- In between `---`, there is [YAML](https://en.wikipedia.org/wiki/YAML)-formatted metadata
- Generally: title, author, and configuration to tell Quarto what kind of document it is, how to format it, and how to run the code in it

## Front matter: example

```{quarto}
---
title: Quarto Introduction
author: Matt Bhagat-Conway
---
```

## Markdown

- Text in Quarto documents is formatted using [Markdown](https://daringfireball.net/projects/markdown/)
- Markdown is a simple format to specify basic text formatting in a plain-text document
- Markdown is converted to formatted text when you render your Quarto document
- Anything that is not in front matter or a code cell (discussed shortly) is treated as Markdown

## Markdown syntax: paragraphs

- A paragraph in Markdown is one or more lines of text with no blank lines between them.
- Multiple lines without line breaks will be treated a single paragraph
    - A common mistake is to not separate paragraphs with a blank line, and then they run together when rendering

```markdown
This is one paragraph.
```

<br/>

```markdown
This is↵
also one paragraph.
```

<br/>

```markdown
This is↵
↵
two paragraphs
```

## Markdown syntax: section headers

- Section headers start with 1--6 `#` characters (with no spaces before them)
- These correspond to headings level 1 (largest) to 6 (smallest)
- Generally, you will want to start with level 2 headings, as the document title will be the level 1 heading

```
## Level 2
### Level 3
#### Level 4
##### Level 5
###### Level 6
```

## Markdown syntax: bold and italic

- **Bold** text is created by surrounding text with `**`
_ _Italic_ text is created by surrounding text with `_` or `*`
- These symbols must immediately precede or follow words/punctuation; there cannot be spaces between the symbol and the text

```
**Bold text**

_Italic text_

*Italic text*
```

## Markdown syntax: bulleted lists

- Bulleted lists: start each line with `-` or `*`

```
* This is a
* bulleted list
```
<br/>
```
- This is a
- bulleted list
```

## Markdown syntax: numbered lists

- Numbered lists have lines that start with a number followed by a period and a space
- Only the number of the first item matters; all others will be numbered sequentially (this makes editing easier)

```
1. This
1. is
1. a
1. list
```

## Markdown syntax: links

- You can add links to other websites; the link text goes in `[]` and the URL follows in `()`

```
[Odum Institute](https://odum.unc.edu)
```

## Quarto: code cells

- A Quarto code cell is delimited by three backticks ```` ``` ```` on lines by themselves
- After the first set of backticks, the language used is enclosed in `{}`

```{{r}}
R code
```

- A code cell can contain one or multiple lines of code (or even none)

## Creating our first Quarto document

- We're going to create a very simple Quarto document that has a title and author, and runs some simple data analysis using datasets built in to R
- We'll walk through the creation of this document step-by-step

## Setting up the environment

- To keep everything together, we'll put everything in a single folder and RStudio project
- In RStudio, select File -> New Project -> New Directory -> New Project
    - There are also options to create Quarto websites, books, etc.
    - We'll talk about these later and create them manually, but if you knew you wanted your project to be a website, book, etc. you could also specify that now

## Creating a new file

- In RStudio, choose File -> New File -> Quarto Document and fill in the title and author
- Leave the other options at their defaults
- Press "Create empty document"
- Save the file as `intro.qmd` in the folder created for your project

## Creating the front matter

- RStudio already created the front matter for us, but we could edit it now or create it from scratch
- You need to enclose the title in quotes if it contains a `:` but otherwise you do not need to

```
---
title: Tree height analysis
author: Matt Bhagat-Conway
---
```

- Add a blank line after the front matter

## Adding text

- After the front matter, anything that isn't a code cell is treated as Markdown
- We'll add a sentence describing that this is an analysis of black cherry tree heights, and we'll link to the Wikipedia page on black cherry trees: <https://en.wikipedia.org/wiki/Black_cherry>
- Headers let us divide up our code into sections
- We'll add a level-2 header saying that the first part of our analysis file is loading necessary packages

## Adding text: Markdown code

```
This is an analysis of the heights of [black cherry](https://en.wikipedia.org/wiki/Black_cherry) trees.

## Load libraries
```

## Adding a code cell

- Next, we'll add a code cell that loads the `tidyverse` library, which we'll use for data analysis and management
- We need to tag this cell as an R cell by including `{r}`

```{{r}}
library(tidyverse)
```

## Running that code cell

- When developing a Quarto document, you will usually want to run the code interactively
- You can run a single code cell in RStudio by
    - Clicking the play button in the upper right of the cell
    - Putting your cursor in the cell and typing <kbd>Ctrl</kbd>/<kbd>Cmd</kbd>-<kbd>shift</kbd>-<kbd>enter</kbd>
- You can also run all the cells above by clicking the down-arrow button
- If you get an error about `tidyverse` not being installed, you can just run `install.packages("tidyverse")` in your console

## Adding additional code cells

- Add two more code cells
- One should load the data with the code `data(trees)`
- The next should calculate the mean height with the code `mean(trees$Height)`
- Add these cells and run them. Include text describing each.

## Rendering the document

- Click the "Render" button in the RStudio toolbar to render the document
- Alternately, you can render from the command line by running `quarto render intro.qmd` or `quarto preview intro.qmd`

## Inline code

- So far, our code cells and text have been completely separated
- Sometimes, we might want to incorporate the results directly into the text
- For instance, rather than just having the mean height of 76 feet printed out below the code that calculates it, we could embed it in a sentence that say "The mean height of black cherry trees is 76 feet."
- We can do this with an inline code cell, which includes its output _inline_ with the markdown around it
- The format of an inline code cell is \``{{r}} R code here`\`, and you can include any single line of R code
- My preference is to do all calculations in a code cell, store the output in a variable, and then just refer to that in the inline cell

## Inline code: example

- Modify the cell that calculates the mean height to store the result in a variable

```{{r}}
mean_height = mean(trees$height)
```

- Add markdown below it that says

```
The mean height of black cherry trees is `{r} mean_height` feet
```

- Render your document again

## Inline code and dynamic documents

- The "76" value is now tied to your calculations and data
- If we were to modify the data used (e.g. by collecting more records), the value 76 would update automatically
- This is really useful for producing reports or dashboards of summary statistics that need to be updated regularly

## Including plots

- Numeric results aren't the only thing we'd like to include in documents
- Often we will want to include plots/figures as well
- Let's add a code cell that creates a histogram to show the distribution of tree heights in the data

```{{r}}
ggplot(trees, aes(x=Height)) +
    geom_histogram()
```

- Run the cell to confirm the plot shows up below it
- Render the document again to see how it shows up in the document

## Figure captions

- In academic writing, we often want to have figures captioned
- We can add a caption to a figure generated from a code cell by adding a special Quarto `#| fig-cap: ` comment to the top of a cell
- Comments starting with `#| ` are interpreted as Quarto directives for that cell

```{{r}}
#| fig-cap: Histogram of tree heights (feet)
ggplot(trees, aes(x=Height)) +
    geom_histogram()
```

## Alternative text

- Charts are a graphical element, and are not accessible to all individuals
- Many visually-impaired individuals will use a _screen reader_, software that speaks the text on their screen out loud
- All charts should either have alternative (alt) text, or be fully described in the text of the report
- For small charts, you can list the values in the alt text (e.g. the percentages drving alone, etc.)
- For larger charts, you should describe overall trends/findings
- For many organizations, ensuring accessibility is a legal requirement under Section 508 of the Americans with Disabilities Act
- You can add alt text to your figures by adding the Quarto comment `#| fig-alt: Chart showing that cherry tree highes are distributed from 60-90 feet, with peaks near 75 and 80`

## Figure numbering

- We would also like to number the figures so we can refer to them in the text
- We don't want to just write e.g. Figure 1 in the caption, because we might add another figure earlier
- If we add `#| label: fig-height` to the top of the cell, this will give the figure the _label_ `fig-height`
- Labels for figures must start with `fig-` and should be a word or two, separated by hyphens
- Re-render your document to see that the figure is now numbered Figure 1

## Referencing figures in text

- The whole point of numbering figures is so that we can refer to them in the text
- We don't want to just write Figure 1 in the text, because, again, we might later move the figures around
- Instead, we can write `@fig-height`, and it will be converted to a reference to Figure 1 when the document is rendered (and will even be hyperlinked to the figure)
- If the figure ever gets moved around, the reference will update
- If you are writing in a language other than English, adding `lang: language_code` to your front matter will make the figure text get expanded in the correct language
    - For instance, if you put `lang: zh-CN` for Simplified Chinese, the reference would say 图 1
- [Language codes are described here](https://www.w3.org/International/questions/qa-choosing-language-tags)

## Tables

- Another common element of reports and documents is are tables
- There are [two ways to create a table in Quarto](https://quarto.org/docs/authoring/tables.html): Markdown tables and tables created by code

## Markdown table syntax

- A table in Markdown looks like this

```markdown
| Statistic | Value                      |
|-----------|----------------------------|
| Mean      | `{r} mean(trees$Height)`   |
| Median    | `{r} median(trees$Height)` |
| SD        | `{r} sd(trees$Height)`     |
```

- Add this to your document (not in a code cell)

## Markdown table syntax

- I've aligned the column breaks for readability, but this is optional
- This would do the same thing

```markdown
| Statistic | Value |
|---|---|
| Mean | `{r} mean(trees$Height)` |
| Median | `{r} median(trees$Height)` |
| SD | `{r} sd(trees$Height)` |
```

## Table captions

- To add a caption to a table, add a blank line _below_ the table, and then a line starting with `: ` followed by the caption
- The caption will generally render above the table (unless overridden by a template, which we'll discuss shortly), even though it is written below the table

```markdown
| Statistic | Value                      |
|-----------|----------------------------|
| Mean      | `{r} mean(trees$Height)`   |
| Median    | `{r} median(trees$Height)` |
| SD        | `{r} sd(trees$Height)`     |

: Descriptive statistics of tree height (feet)
```

## Table numbering and cross-referencing

- Adding `{#tbl-<label>}` after the cpation will number the table and allow it to be cross-referenced
```markdown
| Statistic | Value                      |
|-----------|----------------------------|
| Mean      | `{r} mean(trees$Height)`   |
| Median    | `{r} median(trees$Height)` |
| SD        | `{r} sd(trees$Height)`     |

: Descriptive statistics of tree height (feet) {#tbl-desc}

@tbl-desc shows...
```

## Creating tables in code

- Sometime you won't want to create your tables manually like this
- You can create them from code as well
- How you do this depends on the language, but in R you can use the [gt](https://gt.rstudio.com/) package, or in Python the [tabulate](https://pypi.org/project/tabulate/) package

## Execute options

- Sometimes you want to include all of your code in your rendered document (for instance, for a technical appendix documenting how you performed an analysis)
- Other times you may not (for example, a report, a presentation, or a dashboard)
- You can control whether code is included with the `execute` option in your front matter

## Execute options: run code, but don't show it

Adding 
```yaml
execute:
    echo: false
```
to your front matter will mean that code is still executed, and outputs (plots, results, etc.) are still included, but the code itself is not shown

- Try adding this to your front matter

## Execute options: run code, but don't show output

Adding
```yaml
execute:
    echo: false
    output: false
```

or

```yaml
execute:
    include: false
```

will disable output from the cells as well

- Try this

## Overriding execute options

- Oops, that made our histogram go away too
- You can override the execute options for any code cell by including the option you want to override as a Quarto comment at the top of the cell
- Add `#| output: true` to the top of the cell that produces the histogram
    - If you used the form with `include: false` in your front matter, add `#| include: true` instead
    - You may also need to add `#| warning: false` to hide the text that tells you how to pick a different bin width for the histogram

## Not executing cells at all

- Sometimes, you might not want to execute code in a cell at all
- For example, if you were writing documentation, a code cell might show how to install the package you're documenting, but you don't want to install it every time you render the document
- Setting `#| eval: false` will disable execution of a cell
- You can also set
```yaml
execute:
    eval: false
```
to disable execution of every cell in the document

- I sometimes disable execution if I want the code displayed to be different from the code actually run (for instance, in a [code demo where I add additional code to adjust how the chart displays in the output](https://github.com/mattwigway/MyFirstFourStepModel/blob/90186cb02aba5900a75e81856d946d1b36fd4133/presentations_and_publications/ite2024/index.qmd#L172))

## Citations

- In academic writing we often need to write in-text citations and bibliographies as well
- We don't want to have to do this manually:
    - It makes keeping in-text citations in sync with the reference list difficult and prone to error
    - It makes changing citation formats difficult
- Instead, Quarto integrates the [BibTeX](https://www.bibtex.org/) citation data storage format and the [Citation Style Language](https://citationstyles.org/) citation-formatting software to handle this automatically

## The BibTeX format

- A BibTeX file is a text-based file with the file extension `.bib`
- It has one or more entries that look something like this:

```bibtex
@article{bhagat-conway_rush_2023,
  title = {Rush Hour-and-a-Half: {{Traffic}} Is Spreading out Post-Lockdown},
  author = {Bhagat-Conway, Matthew Wigginton and Zhang, Sam},
  date = {2023-09-13},
  journaltitle = {PLoS ONE},
  volume = {18},
  number = {9},
  pages = {e0290534},
  doi = {10.1371/journal.pone.0290534},
}
```

- `bhagat-conway_rush_2023` is the _citation key_ which we'll use to refer to this paper when referencing it

## Managing BibTeX files

- I don't recommend creating BibTeX files by hand (although some people do)
- I use [Zotero](https://www.zotero.org/) and the [Better BibTeX extension](https://retorque.re/zotero-better-bibtex/), and have it configured so I can copy BibTeX-formatted references directly from Zotero
- Other citation management software should have similar features
- ChatGPT is also pretty good at taking a reference and formatting it as BibTeX if you ask it to

## Using BibTeX files to add citations

- Create a new file `references.bib` in the same folder as your Quarto document
- Paste the BibTeX entry into it:

```bibtex
@article{bhagat-conway_rush_2023,
  title = {Rush Hour-and-a-Half: {{Traffic}} Is Spreading out Post-Lockdown},
  author = {Bhagat-Conway, Matthew Wigginton and Zhang, Sam},
  date = {2023-09-13},
  journaltitle = {PLoS ONE},
  volume = {18},
  number = {9},
  pages = {e0290534},
  doi = {10.1371/journal.pone.0290534},
}
```

## Referencing you BibTeX file from Quarto

- To use a bibliography in Quarto, you need to add it to your front matter

```yaml
bibliography: references.bib
```

(if you called your BibTeX file something other than references.bib, put that file name here)

## Adding a citation

- There are several ways to add a citation
    - `@bhagat-conway_rush_2023`: Bhagat-Conway and Zhang (2023)
    - `[@bhagat-conway_rush_2023]`: (Bhagat-Conway and Zhang 2023)
    - `[-@bhagat-conway_rush_2023]`: (2023)
    - `[@bhagat-conway_rush_2023, p. 12]`: (Bhagat-Conway and Zhang 2023, 12)
    - `@bhagat-conway_rush_2023 [p. 12]`: Bhagat-Conway and Zhang (2023, 12)
    - `[-@bhagat-conway_rush_2023, p. 12]`: (2023, 12)
- Experiment with a few of these in your document, and re-render

## Changing the citation style

- One of the great things about Quarto is it is really easy to change the citation style, even after your document is written
- Quarto supports any citation style implemented in the [Citation Style Language](https://citationstyles.org)
- Thousands of citation styles are available from the [Zotero Style Repository](https://www.zotero.org/styles), which I recommend even if you don't use Zotero

## Downloading a citation style

- Let's change our document to use APA style
- Go to the [Zotero Style Repository](https://www.zotero.org/styles) and search for "apa"
- Click on "American Psychological Association 7th edition"
    - If you have Zotero it may ask if you want to add the citation style to Zotero; click Cancel and it will download
- Move the `apa.csl` file you just downloaded into the same folder as your Quarto document

## Using the citation style

- To change citation styles, just add to your front matter
```yaml
csl: apa.csl
```
- Re-render your document and note that the citation styles have updated
- Changing citation styles usually works quite well
    - The main exception is when switching from an author-date to numbered style, some sentence structure may need adjustment
    - e.g. "Bhagat-Conway and Zhang (2023) found ..." makes sense, while "[7] found..." is more awkward

## Sharing your document with others

- You will notice that when you render your document that you have a file `intro.html` and a folder `intro_files`
- The folder contains the other things needed to display your document: images, style sheets, etc.
- If you wanted to share your document with someone else, you'd need to share both the HTML file and the associated folder
- Another option is to publish your files to a web server, e.g. Github Pages

## Creating self-contained HTML documents

- If you add the following to your front matter, you can create a _self-contained_ HTML document that embeds all images, style sheets, etc. (it will be larger)
```yaml
format:
    html:
        embed-resources: true
```

## Output formats

- So far, we have only used the default HTML output from Quarto
- Quarto also supports output to PDF or Word
- To output your file to PDF, just add to your front matter
```yaml
format: pdf
```
- Re-render your document to see that the output is now a PDF

## Installing LaTeX

- Quarto PDF output uses LaTeX by default; if you do not have LaTeX you may get an error
- To install LaTeX, you can just run `quarto install tinytex` in a terminal

## Format options

- The PDF format has [many options](https://quarto.org/docs/reference/formats/pdf.html) to control the look and feel of your document
    - The HTML format [has a few as well](https://quarto.org/docs/output-formats/html-basics.html)
- Options for formats are created by indenting them below the name of the format
- For instance, adding this to your front matter will change the margins and fonts

```yaml
format:
    pdf:
        margin-left: 1in
        margin-right: 1in
        margin-top: 1in
        margin-bottom: 1in
        mainfont: Times New Roman
        sansfont: Arial
```

## Word output

- You can output to Microsoft Word format as well by specifying in your front matter
```yaml
format: docx
```
- There are fewer options for Word output, but you can control what it looks like by [creating a reference document](https://quarto.org/docs/output-formats/ms-word-templates.html)
- This is just a template that uses Word styles to specify how different parts of the document should look

## Custom word output

- You can create a reference document by running
```sh
quarto pandoc -o custom-reference-doc.docx --print-default-data-file reference.docx
```
- This will create a file `custom-reference-doc.docx` which contains all styles used by Quarto. You can modify the styles in Word to change how Quarto output appears
- Note that you must modify the _styles_ (e.g. using the styles pane), not just the text
- To use the reference document, just add to your front matter
```yaml
format:
    docx:
        reference-doc: custom-reference-doc.docx
```

## Templates

- A growing number of journals or conferences have [Quarto templates](https://quarto.org/docs/journals/templates.html) that will automatically put your document in the correct format
- For instance, I maintain a [template for the Transportation Research Board Annual Meeting](https://github.com/mattwigway/trb-quarto)
- Let's reformat our document to this format
- In the console, run `quarto add mattwigway/trb-quarto`

## Applying a template to your document

- Then change the output format from `pdf` to `trb-pdf`, and remove all PDF-specific options
- Also remove the `csl: apa.csl` line, as the citation format is handled by the template 
- The format section of your front matter should look like
```yaml
format:
    trb-pdf: default
```
- Your document should now look like a TRB paper

## Other types of Quarto documents

- Quarto can be used to create quite a few kinds of other documents
    - Presentations
    - Dashboards
    - Websites
    - Books

## Presentations

- Quarto provides three output formats for creating presentations
    - revealjs
    - PowerPoint
    - Beamer (LaTeX)
- These slides are a Quarto RevealJS presentation [[quarto source]](https://github.com/mattwigway/odum-quarto/blob/main/slides/index.qmd)

## Creating a presentation

- In RStudio, choose File -> New -> Quarto presentation... and choose "create empty document"
- RStudio will default to a RevealJS presentation
- Save the presentation as `slides.qmd`

## Quarto presentation syntax

- New slides start any place there is a level-2 heading (i.e. 2 `#` signs); this is the title of the slide
- You can create a new slide with no title by adding `---`
- If you use a level-1 heading (i.e. 1 `#` sign), you will create a title slide, with the title vertically centered
- All the normal Quarto functionality---Markdown, code, images, etc.---are available

## Creating a presentation in Quarto

- Let's create a presentation about black cherry trees in Quarto
- We'll start with a slide that describing the black cherry tree
- Then we'll have a slide with the histogram we made earlier
- Then we'll have a slide with a picture of a black cherry tree, and columns with our comments

## Creating the slide that describes the black cherry tree

- Create a new slide with a level-2 heading

```
## Black cherry trees
```

- Add a bulleted list with a few fun facts about black cherry trees, some ideas
    - Black cherry is often used for furniture, cabinetry, and floors
    - It has a slightly reddish hue, accentuated by certain finishes
    - Black cherry is common throughout the eastern United States

## Creating the slide with the plot

- Include the code to create the plot in your document
    - Note that you will also need to include the code to load the data and libraries
    - Revealjs format hides code by default, but you can adjust execute options to change that
    - For instance, when I give presentations about coding, I often want to show the code [e.g. these slides](https://projects.indicatrix.org/MyFirstFourStepModel/presentations_and_publications/ite2024/#/running-the-model-trip-distribution)

## Creating the slide with the image of the tree

- Make an `images` folder in the same folder as your Quarto document
- Download the [picture of the black cherry tree from Wikipedia](https://upload.wikimedia.org/wikipedia/commons/0/0d/Amerikaanse_vogelkers_Prunus_serotina_closeup.jpg)
- Save it as `cherry.jpg` in the images folder

## Creating columns

- We want a two column layout, with the image on the right
- The syntax for creating columns is a little awkward the first time you use it
- It looks like this

```
:::: {.columns}
::: {.column width="60%"}
...left column content...
:::
::: {.column width="40%"}
...right column content
:::
::::
```

## Column syntax explained

- The groups of colons create a block of content (aka a _div_) that starts with one group and ends with the next group with the same number
- `{.columns}` styles the outer block as a column container
- `{.column width="40%"}` styles the inner block as column, and sets its width attribute to 40%

## Inserting the image

- You use Markdown image syntax to insert an existing image, which looks very similar to link syntax, but starting with an `!`
- Inserting our black cherry image into the right column would look like this

```
![Black cherry](images/cherry.jpg)
```

- `images/` tells Quarto to look in the images folder for `cherry.jpg`
    - You could just put `cherry.jpg` in the same folder as the Quarto document, and not specify `images/`, but I like to keep my images in their own folder since ther are often a lot of them

## Adding alt text

- You can add alt text to an image inserted this way by adding `{fig-alt="alt test"}` directly after the image, like this

```
![Black cherry](images/cherry.jpg){fig-alt="Thin green leaves with white starburst flowers."}
```

## Cross-referencing

- You can number the figure so you can add references to it by including the label after a `#` inside the `{}`, like this

```
![Black cherry](images/cherry.jpg){#fig-cherry fig-alt="Thin green leaves with white starburst flowers."}
```

- Like with charts, it must start with `fig-`
- You can then reference it with `@fig-cherry`
    - Referencing numbered figures is uncommon in presentations, but this same syntax for adding existing images works in other formats as well

## Incremental lists

- You can make all lists incremental (appearing one item at a time) by specifying incremental in the front matter
```yaml
format:
    revealjs:
        incremental: true
```
- You can make a single list incremental by wrapping it in an incremental div

```
::: {.incremental}
- Incremental
- List
:::
```

- More complicated incremental behavior can be created with [fragments](https://quarto.org/docs/presentations/revealjs/advanced.html#fragments) and [animations](https://quarto.org/docs/presentations/revealjs/advanced.html#auto-animate)

## Speaker notes

- You can add speaker notes to any slide by adding a div at the bottom marked as notes:

```
::: {.notes}
Make sure to point out leaf colors
:::
```

## Render your presentation

- It should open in your web browser
- Press <kbd>f</kbd> to enter full-screen mode
- <kbd>esc</kbd> to leave
- <kbd>s</kbd> to enter speaker view

## Customizing the style of your presentation

- The revealjs output format has a number of ways to customize the presentation
- For instance, I usually use these settings:
```yaml
format:
    revealjs:
        width: 1600
        height: 900
        logo: images/UNC_logo_RGB.png
        slide-number: true
```
- This sets the width and height so that text is fairly large when blown up to a projector
- It adds the UNC logo to each slide (it must be in your `images/` folder)
- It includes slide numbers

## RevealJS themes

- You can also change themes, [many are available](https://quarto.org/docs/presentations/revealjs/themes.html), e.g.
```yaml
format:
    revealjs:
        theme: dark
```
- If you want to customize even more, you can code a custom theme (this is how I get Carolina Blue titles and links in this presentation)

## Converting to PDF

- You can convert revealjs presentations to PDF in two ways
    - Opening the presentation in Chrome and appending `?print-pdf` to the URL, and then printing to a PDF
    - Using the [decktape](https://github.com/astefanutti/decktape) tool

## Creating a PowerPoint presentation

- If you need a PowerPoint-formatted output, you can set in your front matter
```yaml
format: pptx
```
- Like Word documents, you can create [custom PowerPoint templates](https://quarto.org/docs/presentations/powerpoint.html#powerpoint-templates)
- You can also use incremental lists with PowerPoint

## Presentations are just documents

- If you change the format back to `html`, your document will render just fine
- Instead of being split into slides, everything will be layed out like a document
- Useful for sharing notes/content outside of a presentation
- _Speaker notes show up as well, keep in mind when distributing_

## Using the Quarto command line interface

- So far, we've mostly interacted with Quarto through the RStudio interface
- Quarto has a command line interface as well through the `quarto` command



## What is the command line?

- A way of interacting with the computer using a textual rather than graphical interface
- To use the command line, you run _commands_. Each command has zero or more _options_ and _arguments_
- When using the command line, you are always in a _working directory_. By default, commands will apply to files in this directory/folder.



<!-- _class: center blank -->

## What is the command line?

![](cli-demo.svg){fig-alt="demo of the command line"}

## Anatomy of a command

`ls -l slides`

<br/>
<br/>

- `ls`: Command (`ls` - list files) - always first item
- `-l`: Option (`-l` - long format) - always starts with `-` or `--`
- `slides`: Argument (list files in the directory `slides`)
- Press enter to run a command



## Specifying folders/directories

- Nested directories are separated with `/`
- `Documents/odum` refers to the `odum` folder inside the `Documents` folder
- `Documents/odum/introduction.txt` refers to `introduction.txt` inside `odum` inside `Documents`
- Any number of nested directories and files is a _path_



## Autocompletion

- When typing a command or a directory, pressing `TAB` will autocomplete
- If there is more than one possibility, `TAB` `TAB` will show possibilities



## Escaping spaces

- Spaces separate options and arguments
- If you want to refer to a file or folder with a space in it, two options
    - Put a `\` before the space
        - e.g. `Documents/odum\ quarto`
    - Enclose the entire path in `'` or `"`
        - e.g. `"Documents/odum quarto"`
- Autocompletion will automatically escape any spaces it autocompletes

## The _working directory_

- When you use the command line, there is always a working directory
- This is the folder that the terminal is running "in"
- Any commands you type will refer to files in this folder, unless you specify a complete path



## Useful commands

- `cd directory`: Change the working directory
    - `cd ..`: Change to the parent directory (e.g. if in `Documents/PLAN_390`, would change to `Documents`)
- `ls`: list files in the current working directory
- `mv oldname newname`: rename files or move them between directories
- `cp oldname newname`: copy file `oldname` to `newname`, which may be in a different directory
- `mkdir name`: Make a folder/directory `name` in the working directory

## Useful Quarto commands

- `quarto preview <document>`: Preview the document, open in a web browser and automatically update as the document is edited
- `quarto render <document>`: Render the document to its final output format

## Quarto _projects_: working with multiple files

- At some point you will want to integrate multiple Quarto files
- You can do this using a Quarto _project_
- Quarto projects
    - define shared front matter across a group of documents
    - allow integrating multiple files into a single output
    - allow creation of specialized output, e.g. websites or books

## Structure of a Quarto project

- The main file is `_quarto.yml` which should be in the same folder as your Quarto documents
    - For better organization, you can also put Quarto documents in subfolders of the project

## Creating a Quarto project

- Create a `_quarto.yml` file in the same folder as your other files
- Anything in this file will be treated as if it were in the front matter of all of the Quarto files in the project
    - Unless specifically overridden
- You also have project-specific options, such as where to put rendered output
- Add the following to the `_quarto.yml` file
```yaml
project:
    output-dir: docs
```
- This will render project output to the `docs/` folder
    - You can render to any folder, but rendering to `docs/` will let you easily post your rendered documents to [Github Pages](https://pages.github.com/) by just committing your project to Github
    - This is how I post these slides on the web, for example

## Common options for all documents

- You can add other code to `_quarto.yml` that will be treated as if it were in the front matter of all documents in the project
- For instance, let's put our bibliography in `_quarto.yml`
- Add the following
```yaml
bibliography: references.bib
```
and remove the corresponding lines from your `intro.qmd` files

## Rendering your Quarto project

- In the terminal, run `quarto render`
- Note that both your presentation and your document are in the `docs/` folder

## Special types of Quarto projects: websites

- A website is just a special type of Quarto project that gets rendered with navigation features, etc.
- To create a Quarto website, just add a `type: website` under the project information in `_quarto.yml`
```yaml
project:
    type: website
```

## Configuring a Quarto website

- You can configure your Quarto website with the `website:` section in `_quarto.yml`
- For instance, this will add a navigation bar with links for your `intro.qmd` and `slides.qmd` files
```yaml
website:
    title: Black Cherry Trees
    navbar:
        left:
            - href: intro.qmd
              name: Introduction
            - href: slides.qmd
              name: Slides
```

## Rendering your website

- We want this to display as a website, so remove `format: docx` from your  `intro.qmd` file and set the format of your `slides.qmd` file to `revealjs`
- Run `quarto preview` to open your website in a web browser

## Creating a default file

- Generally, you would name your main page `index.qmd`
- This is what folks will see when they open your website
- If you don't, the first page in the navigation bar will be the default
    - Or, potentially, a 404 Not Found, depending on where you host your website (more on this shortly)

## Dashboards

- Quarto can be used to create compelling dashboards showing high-level statistics about a dataset
- For instance, if you have data you collect and need to publish an overview of it, you could create a dashboard
- By specifying your dashboard with Quarto code, you can re-render and update it when new data comes in, without manually re-doing analysis or creating reports
- These can be visually compelling, e.g. [this dashboard of requests to the City of Norfolk](https://grrrck.quarto.pub/mynorfolk-dash/)

## Creating a dashboard

- Create a new, empty Quarto document in your folder
- Call it `dashboard.qmd`

## Dashboard layout

- Dashboards use Markdown headers to divide the page into tabs and rows
- Level 1 headers (1 `#`) become tabs
- Level 2 headers (2 `##`) become rows
- Multiple plots/tables can be placed side-by-side in one row

## The data for our dashboard

- So far we've been using the built-in trees dataset, but there are only so many analyses we can do with this data
- In keeping with the theme of trees, we'll use a [CSV file of the Durham Street Tree inventory](../durham_trees.csv), which I got from the City of Durham open data portal
- Go ahead and download that CSV file now

## Setting up the front matter

- Put this in the front matter of your Quarto document

```yaml
---
title: Durham Street Trees
format: dashboard
execute:
    echo: false
---
```

## Loading data and libraries

Add this code cell just below the front matter, to load the tidyverse library and the data

```{{r}}
#| include: false
library(tidyverse)
data = read_csv("durham_trees.csv")
```

## Layout of our dashboard

- We will have two rows
- In the top row, we'll have a large bar plot of tree height
- In the bottom row, we'll have a bar plot of the most common species, and a heatmap of where the trees are located

## Creating the first row

- Create a row for the height chart by creating a level-2 header
- The text of the header is ignored, but we want to set a height
```
## {height="50%"}
```

## Adding the bar plot

- Add the following code cell to create the bar plot by tree height

```{{r}}
#| fig-alt: Graph of tree height showing that trees 0-20 feet tall are by far most common
ggplot(data, aes(x=heightft)) +
    geom_bar()
```

## Adding the second row

- Add another row below

```
## {height="50%"}
```

## Adding the popularity by genus

```{{r}}
#| Bar plot showing that Quercus (oak), Lagerstroemia (crepe myrtle), Acer (maple), and Ulmus (pine) are the most common street trees in Durham
data %>%
    count(genus) %>%
    filter(n > 100) %>%
    arrange(genus) %>%
    ggplot(aes(y=genus, x=n)) +
        geom_col()
```

## Adding the heatmap

```{{r}}
#| fig-alt: Plot showing the heaviest density of trees near Downtown Durham
ggplot(data, aes(x=X, y=Y)) +
    geom_density_2d_filled()
```

## Add the dashboard to your website navigation

- In your `_quarto.yml`, add to the `navbar: left:` section
```yaml
            - href: dashboard.qmd
              text: Dashboard
```
- Preview your website again
- You could also preview just the dashboard by clicking Render in RStudio with `dashboard.qmd` open

## Publishing your website

- If your content is public, you can publish it to the web
- The `quarto publish` command knows how to publish to a [number of services](https://quarto.org/docs/publishing/)
- The most common are Quarto Pub and Github Pages
    - We'll discuss Quarto Pub
    - Github Pages is a bit more complicated to set up, as you have to create a Github repository for your content
    - Plug: take my Git and Github class next month!

## Using Quarto Pub

- Just run `quarto publish` in the directory where your `_quarto.yml` file is
- The first time you use it, you will be prompted to create an account
- Your website will be available at `https://<username>.quarto.pub/<site-title>`
- You can also publish a single document with `quarto publish <document>.qmd`

## Questions/resources

- Quarto has [excellent documentation](https://quarto.org/docs/)
- Part of my job is assisting folks working on computational projects. Feel free to reach out: <mwbc@unc.edu>

